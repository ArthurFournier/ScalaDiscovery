[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\fourna\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\fourna\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 114.5671ms
[debug]       Load.loadUnit: defsScala took 0.4202ms
[debug] [Loading] Scanning directory C:\Users\fourna\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\fourna\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.9293 ms
[debug]           Load.resolveProject(global-plugins) took 45.31ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\fourna\.sbt\1.0\plugins, plugins: List(<none>))) took 92.0437ms
[debug] [Loading] Done in C:\Users\fourna\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 118.226299ms
[debug]       Load.loadUnit: cleanEvalClasses took 2.9951ms
[debug]     Load.loadUnit(file:/C:/Users/fourna/.sbt/1.0/plugins/, ...) took 255.5714ms
[debug]   Load.apply: load took 627.902699ms
[debug]   Load.apply: resolveProjects took 53.791899ms
[debug]   Load.apply: finalTransforms took 164.0111ms
[debug]   Load.apply: config.delegates took 32.7248ms
[debug]   Load.apply: Def.make(settings)... took 1383.109001ms
[debug]   Load.apply: structureIndex took 437.784ms
[debug]   Load.apply: mkStreams took 3.142099ms
[info] loading global plugins from C:\Users\fourna\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 10826.2268ms
[debug]           Load.loadUnit: plugins took 49.4638ms
[debug]           Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory C:\Users\fourna\IdeaProjects\ScalaDiscovery\project
[debug]             Load.loadUnit: mkEval took 10.1391ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\fourna\IdeaProjects\ScalaDiscovery\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.5968 ms
[info] loading settings for project scaladiscovery-build from idea.sbt ...
[debug]               Load.resolveProject(scaladiscovery-build) took 11.7135ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scaladiscovery-build, base: C:\Users\fourna\IdeaProjects\ScalaDiscovery\project, plugins: List(<none>))) took 17.5136ms
[debug] [Loading] Done in C:\Users\fourna\IdeaProjects\ScalaDiscovery\project, returning: (scaladiscovery-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6521.5645ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.9208ms
[debug]         Load.loadUnit(file:/C:/Users/fourna/IdeaProjects/ScalaDiscovery/project/, ...) took 6580.2469ms
[debug]       Load.apply: load took 6582.2381ms
[debug]       Load.apply: resolveProjects took 0.1354ms
[debug]       Load.apply: finalTransforms took 78.8164ms
[debug]       Load.apply: config.delegates took 5.5628ms
[debug]       Load.apply: Def.make(settings)... took 248.494ms
[debug]       Load.apply: structureIndex took 67.9596ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\fourna\IdeaProjects\ScalaDiscovery\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9352.415ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\fourna\IdeaProjects\ScalaDiscovery
[debug]       Load.loadUnit: mkEval took 0.2416ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.5074 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 86.5813ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\fourna\IdeaProjects\ScalaDiscovery, plugins: List(<none>))) took 92.462ms
[debug] [Loading] Done in C:\Users\fourna\IdeaProjects\ScalaDiscovery, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2940.363ms
[debug]     Load.loadUnit: cleanEvalClasses took 24.6252ms
[debug]   Load.loadUnit(file:/C:/Users/fourna/IdeaProjects/ScalaDiscovery/, ...) took 12318.4658ms
[debug] Load.apply: load took 12322.1124ms
[debug] Load.apply: resolveProjects took 0.1814ms
[debug] Load.apply: finalTransforms took 99.176ms
[debug] Load.apply: config.delegates took 0.3761ms
[debug] Load.apply: Def.make(settings)... took 204.6294ms
[debug] Load.apply: structureIndex took 55.5354ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to ScalaDiscovery (in build file:/C:/Users/fourna/IdeaProjects/ScalaDiscovery/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63651 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63651, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaDiscovery (in build file:/C:/Users/fourna/IdeaProjects/ScalaDiscovery/)
[debug] > Exec(idea-shell, None, None)
